etty性能还是挺不错的，并发量加上业务代码在做游戏开发都能达到单机2w并发，最近在大象分享网看了免费的大数据统计分析架构-netty部分视频教学，感觉也挺不错的

一、课程用到的软件：java 1.7.0_79，netty-all-4.0.19.Final.jar，eclipse/myeclipse.

二、课程涉及到的技术点：
 1.网络编程，主要介绍网络编程基本概念,Socket服务端和客户端编程，多线程通信，UDP通  信，TCP UDP| HTTP 联系和区别
 2.Netty入门基础到高级特性，Netty核心概念，Transports(传输)，Buffers(缓冲)等
 3.Netty实战及调优

三、课程目标：
  Netty 是一个异步的，事件驱动的网络编程框架和工具，使用Netty 可以快速开发出可维护的，高性能、高扩展能力的协议服务及其客户端应用。
  也就是说，Netty 是一个基于NIO的客户，服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户，服务端应用。Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。
“快速”和“简单”并不意味着会让你的最终应用产生维护性或性能上的问题。Netty 是一个吸收了多种协议的实现经验，这些协议包括FTP,SMPT,HTTP，各种二进制，文本协议，并经过相当精心设计的项目，最终，Netty 成功的找到了一种方式，在保证易于开发的同时还保证了其应用的性能，稳定性和伸缩性。

四、课程大纲：
第一节：Netty入门到精通——物联网行业介绍及前景分析
第二节：Netty入门到精通——网络编程基本概念.
第三节：Netty入门到精通——Socket服务端和客户端编程
第四节：Netty入门到精通——UDP通信
第五节：Netty入门到精通——URL编程以及物联网常用协议TCP UDP HTTP 对比
第六节：Netty入门到精通——Netty介绍
第七节Netty入门到精通——第一个Netty程序
第八节：Netty入门到精通——Netty核心概念
第九节：Netty入门到精通——Transports(传输)
第十节：Netty入门到精通——Buffers(缓冲)
第十一节：Netty入门到精通——ChannelHandler
第十二节：Netty入门到精通——编解码器Codec
第十三节：Netty入门到精通——附带的ChannelHandler和Codec
第十四节：Netty入门到精通——引导Netty应用程序
第十五节：Netty入门到精通——单元测试代码
第十六节：Netty入门到精通——WebSocket.
第十七节：Netty入门到精通——SPDY
第十八节：Netty入门到精通——通过UDP广播事件
第十九节：Netty入门到精通——实现自定义的编码解码器.
第二十节：Netty入门到精通——选择正确的线程模型
第二十一节：Netty入门到精通——Netty项目一：聊天室
第二十二节：Netty入门到精通——Netty项目二：物联网接入系统（1）
第二十三节：Netty入门到精通——Netty项目二：物联网接入系统（2）
第二十四节：Netty入门到精通——Netty调优以及Storm DRPC和Spark Stream介绍

/************************************************************************************************/
Netty，可实现HTTP服务器，FTP服务器，UDP服务器，RPC服务器，WebSocket服务器，Redis的Proxy服务器，MySQL的Proxy服务器等等功能。


传统的HTTP服务器的原理:

1、创建一个ServerSocket，监听并绑定一个端口
2、一系列客户端来请求这个端口
3、服务器使用Accept，获得一个来自客户端的Socket连接对象
4、启动一个新线程处理连接

    1.读Socket，得到字节流
    2.解码协议，得到Http请求对象
    3.处理Http请求，得到一个结果，封装成一个HttpResponse对象
    4.编码协议，将结果序列化字节流
    5.写Socket，将字节流发给客户端
5、继续循环步骤3

HTTP服务器之所以称为HTTP服务器，是因为编码解码协议是HTTP协议，如果协议是Redis协议，那它就成了Redis服务器，如果协议是WebSocket，那它就成了WebSocket服务器，等等
上面我们说的是一个传统的多线程服务器，这个也是Apache处理请求的模式。在高并发环境下，线程数量可能会创建太多，操作系统的任务调度压力大，系统负载也会比较高。那怎么办呢？

于是NIO诞生了，NIO并不是Java独有的概念，NIO代表的一个词汇叫着IO多路复用。它是由操作系统提供的系统调用，早期这个操作系统调用的名字是select，但是性能低下，后来渐渐演化成了Linux下的epoll和Mac里的kqueue。我们一般就说是epoll，因为没有人拿苹果电脑作为服务器使用对外提供服务。而Netty就是基于Java NIO技术封装的一套框架。为什么要封装，因为原生的Java NIO使用起来没那么方便，而且还有臭名昭著的bug，Netty把它封装之后，提供了一个易于操作的使用模式和接口，用户使用起来也就便捷多了。

那NIO究竟是什么东西呢？NIO的全称是NoneBlocking IO，非阻塞IO，区别与BIO，BIO的全称是Blocking IO，阻塞IO。那这个阻塞是什么意思呢？

1.Accept是阻塞的，只有新连接来了，Accept才会返回，主线程才能继续
2.Read是阻塞的，只有请求消息来了，Read才能返回，子线程才能继续处理
3. Write是阻塞的，只有客户端把消息收了，Write才能返回，子线程才能继续读取下一个请求

所以传统的多线程服务器是BlockingIO模式的，从头到尾所有的线程都是阻塞的。这些线程就干等在哪里，占用了操作系统的调度资源，什么事也不干，是浪费。

那么NIO是怎么做到非阻塞的呢。它用的是事件机制。它可以用一个线程把Accept，读写操作，请求处理的逻辑全干了。如果什么事都没得做，它也不会死循环，它会将线程休眠起来，直到下一个事件来了再继续干活，这样的一个线程称之为NIO线程。

while true {
    events = takeEvents(fds)  // 获取事件，如果没有事件，线程就休眠
    for event in events {
        if event.isAcceptable {
            doAccept() // 新链接来了
        } elif event.isReadable {
            request = doRead() // 读消息
            if request.isComplete() {
                doProcess()
            }
        } elif event.isWriteable {
            doWrite()  // 写消息
        }
    }
}
NIO的流程大致就是上面的伪代码描述的过程，跟实际真实的代码有较多差异，不过对于初学者，这样理解也是足够了。

Netty是建立在NIO基础之上，Netty在NIO之上又提供了更高层次的抽象。在Netty里面，Accept连接可以使用单独的线程池去处理，读写操作又是另外的线程池来处理。

Accept连接和读写操作也可以使用同一个线程池来进行处理。而请求处理逻辑既可以使用单独的线程池进行处理，也可以跟放在读写线程一块处理。线程池中的每一个线程都是NIO线程。用户可以根据实际情况进行组装，构造出满足系统需求的并发模型。

Netty提供了内置的常用编解码器，包括行编解码器［一行一个请求］，前缀长度编解码器［前N个字节定义请求的字节长度］，可重放解码器［记录半包消息的状态］，HTTP编解码器，WebSocket消息编解码器等等

Netty提供了一些列生命周期回调接口，当一个完整的请求到达时，当一个连接关闭时，当一个连接建立时，用户都会收到回调事件，然后进行逻辑处理。

Netty可以同时管理多个端口，可以使用NIO客户端模型，这些对于RPC服务是很有必要的。

Netty除了可以处理TCP Socket之外，还可以处理UDP Socket。

在消息读写过程中，需要大量使用ByteBuffer，Netty对ByteBuffer在性能和使用的便捷性上都进行了优化和抽象。

总之，Netty是Java程序员进阶的必备神奇。如果你知其然，还想知其所以然，一定要好好研究下Netty。如果你觉得Java枯燥无谓，Netty则是重新开启你对Java兴趣大门的钥匙。


Netty 在哪些行业得到了应用？
互联网行业：随着网站规模的不断扩大，系统并发访问量也越来越高，传统基于 Tomcat 等 Web 容器的垂直架构已经无法满足需求，需要拆分应用进行服务化，以提高开发和维护效率。从组网情况看，垂直的架构拆分之后，系统采用分布式部署，各个节点之间需要远程服务调用，高性能的 RPC 框架必不可少，Netty 作为异步高性能的通信框架，往往作为基础通信组件被这些 RPC 框架使用。

典型的应用有：阿里分布式服务框架 Dubbo 的 RPC 框架使用 Dubbo 协议进行节点间通信，Dubbo 协议默认使用 Netty 作为基础通信组件，用于实现各进程节点之间的内部通信。它的架构图如下


  Netty是一个简单却不失强大的架构。这个架构由三部分组成——缓冲（Buffer）、通道（Channel）、事件模型（Event Model）——所有的高级特性都构建在这三个核心组件之上。

三大优点：并发高，传输快，封装好



